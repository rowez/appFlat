/*! SassyLists - v1.0.0 - 2014-01-24 */
// Compares two values based on alphabetical order
// -------------------------------------------------------------------------------
// @private
// -------------------------------------------------------------------------------
// @usage sort()
// -------------------------------------------------------------------------------
// @param $a [Literal] : first value
// @param $b [Literal] : second value
// @param $matrix [List] : alphabetical order
// -------------------------------------------------------------------------------
// @return [Boolean]

@function str-compare($a, $b, $order) {
  @if type-of($a) == number and type-of($b) == number {
    @return $a < $b;
  }
  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  @return str-length($a) < str-length($b);
}
// Returns truthiness of a value
// -------------------------------------------------------------------------------
// @private
// -------------------------------------------------------------------------------
// @usage `insert-nth()`
// @usage `prepend()`
// @usage `purge()`
// -------------------------------------------------------------------------------
// @param $value [Literal] : value
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-true($value) {
  @return if($value == null, false, $value and $value != null and $value != "" and $value != ());
}
// Chunks $list into $size large lists
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#chunk
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $size [Number] : length of lists
// -------------------------------------------------------------------------------
// @raise [Error] if $size is not a number
// -------------------------------------------------------------------------------
// @return [List] | false

@function chunk($list, $size) {
  @if type-of($size) != number {
    @warn "#{$size} is not a number for `chunk`.";
    @return false;
  }

  @if $size >= length($list) {
    @return $list;
  }

  $index: 1;
  $result: ();
  $length: length($list);
  $end: ceil($length / $size);

  @for $i from 1 through $end {
    $tmp: ();

    @for $j from 1 through $size {
      @if $index <= $length {
        $is-orphan: $length % $size == 1 and $j == 1;
        $tmp: if($is-orphan, nth($list, $index), append($tmp, nth($list, $index)));
      }
      $index: $index + 1;
    }

    $result: append($result, $tmp);
  }

  @return $result;
}
// Returns whether $list contains $value
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#contain
// -------------------------------------------------------------------------------
// @alias `include()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Literal] : value to look for
// -------------------------------------------------------------------------------
// @return [Boolean]

@function contain($list, $value) {
  @return not not index($list, $value);
}

// Alias
@function include($list, $value) {
  @return contain($list, $value);
}
// Counts the number of occurrences of each value of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#count-values
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [Map]

@function count-values($list) {
  $map: ();

  @each $item in $list {
    $index: map-get($map, $item);
    $value: if($index, $index + 1, 1);
    $map: map-merge($map, ($item: $value));
  }

  @return $map;
}
// Returns $list as a string
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#debug
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $pre [Boolean] : enable/disable variables type and proper indentation
// @param $level [Number] : internal variable for recursivity
// -------------------------------------------------------------------------------
// @return [String]

@function debug($list, $pre: false, $level: 1) {
  @if length($list) == 0 {
    @return "( )";
  }
  
  @if length($list) == 1 {
    @return if($pre,  "(" + type-of($list) + ") ", "") + $list;
  }
  
  $tab: "    ";
  $indent: "";
  $break: if($pre, "\A ", "");
  $length: length($list);
  
  @for $i from 1 to $level {
    $indent: $indent + $tab;
  }
  
  $result: "[" + $break;
  
  @for $i from 1 through $length {
    $item: nth($list, $i);
    $result: $result + if($pre, $indent + $tab, " ");
  
    @if length($item) > 1 {
      $result: $result 
        + if($pre, "(list: " + length($item) + ") ", "") 
        + debug($item, $pre, $level + 1);
    }
  
    @else {
      @if $pre {
        $result: $result + "(" + type-of($item) + ") ";
      }
    
      @if length($item) == 0 {
        $result: $result + "( )";
      }
    
      @else if type-of($item) == string {
        $result: $result + quote($item);
      }
    
      @else if $item == null {
        $result: $result + "null";
      }
    
      @else {
        $result: $result + $item;
      }
    }
  
    @if $i != $length {
      $result: $result + "," + $break;
    }
  }
  
  $result: $result + $break + if($pre, if($level > 1, $indent, ""), " ") + "]";
  
  @return quote($result);
}

// Mixin displaying clean debug
// -------------------------------------------------------------------------------
// @param $list [List] : list

@mixin debug($list) {
  body:before {
    content: debug($list, true)               !important;

    display: block                            !important;
    margin: 1em                               !important;
    padding: .5em                             !important; 

    background: #EFEFEF                       !important;
    border: 1px solid #DDD                    !important;
    border-radius: .2em                       !important;

    color: #333                               !important;
    font: .75em/1.5 "Courier New", monospace  !important;
    text-shadow: 0 1px white                  !important;
    white-space: pre-wrap                     !important;
  }
}

// Explode $string into a list using $break as a breaker
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#explode
// -------------------------------------------------------------------------------
// @param $string [String] : string to explode
// @param $separator [String] : string to use as the breaker
// -------------------------------------------------------------------------------
// @raise [Error] if either argument is not a string
// -------------------------------------------------------------------------------
// @return [List]

@function explode($string, $delimiter: '') {
  @if type-of($string) != "string" {
    @warn "`explode` function expecting a string; #{type-of($string)} given.";
    @return false;
  }

  @if type-of($delimiter) != "string" {
    @warn "`explode` function expecting a string; #{type-of($delimiter)} given.";
    @return false;
  }
  
  $result: ();
  $length: str-length($string);
  
  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }

  $running: true;
  $remaining: $string;
  
  @while $running {
    $index: str-index($remaining, $delimiter);
    @if not $index or $index == 0 {
      $running: false;
    }
    @else {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    }
  }

  @return append($result, $remaining);
}
// Returns first element of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#first
// -------------------------------------------------------------------------------
// @alias `head()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @raise [Error] if either $list is empty
// -------------------------------------------------------------------------------
// @return [Literal] | false

@function first($list) {
  @if length($list) == 0 { 
    @warn "Cannot find first item of empty list.";
    @return false; 
  }

  @return nth($list, 1);
}

// Alias
@function head($list) {
  @return first($list);
}
// Turns multidimensional $list into a one-level list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#flatten
// -------------------------------------------------------------------------------
// @alias `unfold()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function flatten($list) {
  $result: ();

  @each $item in $list {
    @if length($item) > 1 {
      $flatten: flatten($item);
      @each $i in $flatten {
        $result: append($result, $i, list-separator($list));
      }
    }

    @else {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// Alias
@function unfold($list) {
    @return flatten($list);
}
// Adds $value at $index in $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#insert-nth
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $index [Number] : index to add
// @param $value [Literal] : value to add
// -------------------------------------------------------------------------------
// @raise [Error] if $index isn't an integer
// @raise [Error] if $index is strictly lesser than 1
// @raise [Error] if $index is strictly greater than length of $list
// -------------------------------------------------------------------------------
// @return [List] | false

@function insert-nth($list, $index, $value) {
  $length: length($list);
  
  @if type-of($index) != number {
    @warn "List index #{$index} is not a number for `insert-nth`.";
    @return false;
  }

  @if $index < 1 {
    @warn "List index #{$index} must be a non-zero integer for `insert-nth`";
    @return false;
  }

  @if $index > $length {
    @return append($list, $value, list-separator($list));
  }

  $result: ();

  @for $i from 1 through $length {
    @if $i == $index {
      @if is-true($value) {
        $result: append($result, $value, list-separator($list));
      }
    }

    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}

// Returns a list of shared value from $list and $lists minus duplicates
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#intersection
// -------------------------------------------------------------------------------
// @param $list [List] : first list
// @param $lists [ArgList] : other lists
// -------------------------------------------------------------------------------
// @return [List]

@function intersection($list, $lists...) {
  $result: $list;

  @each $list in $lists {
    $temp: ();

    @each $item in $result {
      @if not not index($list, $item) {
        $temp: append($temp, $item, list-separator($list));
      }
    }

    $result: $temp;
  }
 
  $result: remove-duplicates($result);
  @return if(length($result) == 1, nth($result, 1), $result);
}
// Checks whether $list is symmetrical (one-level deep)
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#is-symmetrical
// -------------------------------------------------------------------------------
// @alias `unfold()`
// -------------------------------------------------------------------------------
// @dependence `reverse()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [Boolean]

@function is-symmetrical($list) {
  @return $list == reverse($list); 
}

// Alias
@function is-mirror($list) {
  @return is-symmetrical($list);
}
// Returns last index of $value in $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#last-index
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Literal] : value to be searched for
// -------------------------------------------------------------------------------
// @return [Number] | null

@function last-index($list, $value) {
  $length: length($list);
  
  @for $i from $length * -1 through -1 {
    $i: abs($i);
    @if nth($list, $i) == $value {
      @return $i;
    }
  }

  @return null;
}

// Returns last element of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#last
// -------------------------------------------------------------------------------
// @alias `tail()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @raise [Error] if list is empty
// -------------------------------------------------------------------------------
// @return [Literal] | false

@function last($list) {
  @if length($list) == 0 { 
    @warn "Cannot find last item of empty list.";
    @return false; 
  }
  
  @return nth($list, length($list));
}

// Alias
@function tail($list) {
  @return last($list);
}
// Shift indexes from $list of $value
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#loop
// -------------------------------------------------------------------------------
// @alias `shift-indexes()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Number] : number of position between old and new indexes
// -------------------------------------------------------------------------------
// @raise [Error] if $value isn't an integer
// -------------------------------------------------------------------------------
// @return [List] | false

@function loop($list, $value: 1) {
  @if type-of($value) != number {
    @warn "#{$value} is not a number for `loop`.";
    @return false;
  }

  @if length($list) < 2 {
    @return $list;
  }

  $result: ();
  $length: length($list);

  @for $i from 0 to $length {
    $result: append($result, nth($list, ($i - $value) % $length + 1), list-separator($list));
  }

  @return $result;
}

// Alias
@function shift-indexes($list, $value: 1) {
  @return loop($list, $value);
}
// Adds $value as first index of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#prepend
// -------------------------------------------------------------------------------
// @dependence `is-true()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Literal] : value to prepend to the list
// -------------------------------------------------------------------------------
// @return [List]

@function prepend($list, $value) {
  @if is-true($value) {
    @return join($value, $list, list-separator($list));
  }

  @else {
    @return $list;
  }
}

// Removes all false and null values from $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#purge
// -------------------------------------------------------------------------------
// @alias `clean()`
// -------------------------------------------------------------------------------
// @dependence `is-true()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function purge($list) {
  $result: ();

  @each $item in $list {
    @if is-true($item) {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// Alias
@function clean($list) {
  @return purge($list);
}

// Returns a random value of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#random-value
// -------------------------------------------------------------------------------
// @alias `roll()`
// @alias `luck()`
// -------------------------------------------------------------------------------
// @dependence `random()` (Ruby)
// -------------------------------------------------------------------------------
// @param $list [List] : List
// -------------------------------------------------------------------------------
// @raise [Error] if $list is empty
// -------------------------------------------------------------------------------
// @return [Literal] | false

@function random-value($list) {
  @if length($list) == 0 {
    @warn "Cannot find a random value in an empty list.";
    @return false;
  }

  @return nth($list, random(length($list)) + 1);
}

// Aliases
@function roll($list) {
  @return random-value($list);
}

@function luck($list) {
  @return random-value($list);
}
// Removes duplicate values from $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#remove-duplicates
// -------------------------------------------------------------------------------
// @alias `unique()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $recursive [Boolean] : enable / disable recursivity
// -------------------------------------------------------------------------------
// @return [List]

@function remove-duplicates($list) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return $result;
}

// Alias
@function unique($list, $recursive: false) {
  @return remove-duplicates($list, $recursive);
}
// Removes value from $list at index $index
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#remove-nth
// -------------------------------------------------------------------------------
// @alias `without-nth()`
// -------------------------------------------------------------------------------
// @dependence `replace-nth()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $index [Number] : index to remove
// -------------------------------------------------------------------------------
// @return [List] | false

@function remove-nth($list, $index) {
  @return replace-nth($list, $index, "");
}

// Alias
@function without-nth($list, $index) {
  @return remove-nth($list, $index);
}
// Removes value(s) $value from $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#remove
// -------------------------------------------------------------------------------
// @alias `without()`
// -------------------------------------------------------------------------------
// @dependence `replace()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $value [Literal] : value to remove
// @param $recursive [Boolean] : enable / disable recursivity
// -------------------------------------------------------------------------------
// @return [List]

@function remove($list, $value) {
  @return replace($list, $value, null);
}

// Alias
@function without($list, $value) {
  @return remove($list, $value);
}
// Replaces value at $index from $list by $value
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#replace-nth
// -------------------------------------------------------------------------------
// @dependence `purge()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $index [Number] : index to update
// @param $value [Literal] : new value for index $index
// -------------------------------------------------------------------------------
// @raise [Error] if $index isn't an integer
// @raise [Error] if $index is 0
// @raise [Error] if abs value of $index is strictly greater than length of $list
// -------------------------------------------------------------------------------
// @return [List] | false

@function replace-nth($list, $index, $value) {
  @if type-of($index) != number or $index == 0 or abs($index) > length($list) {
    @warn "Invalid index (#{$index}) for `replace-nth`.";
    @return false;
  }

  $list: set-nth($list, $index, $value);
  @return if(not is-true($value), purge($list), $list);
}

// Replaces $old by $new in $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation.html#replace
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $old [Literal] : value to replace
// @param $value [Literal] : new value for $old
// -------------------------------------------------------------------------------
// @return [List]

@function replace($list, $old, $value) {
  $running: true;

  @while $running {
    $index: index($list, $old);

    @if not $index {
      $running: false;
    }

    @else {
      $list: set-nth($list, $index, $value);
    }

  }

  @return if(not is-true($value), purge($list), $list);
}
// Reverses the order of $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#reverse
// -------------------------------------------------------------------------------
// @alias `mirror()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function reverse($list) {
  $length: length($list);
  $end: floor($length/2);
  
  @if $length < 2 {
    @return $list;
  }

  @for $i from 1 through $end {
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, -$i));
    $list: set-nth($list, -$i, $tmp);
  }
  
  @return $list;
}

// Alias
@function mirror($list) {
  @return reverse($list);
}
// Shuffle function using Fisher-Yates method
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#shuffle
// -------------------------------------------------------------------------------
// @alias `randomize()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// -------------------------------------------------------------------------------
// @return [List]

@function shuffle($list) {
  $length: length($list);

  @if $length < 2 {
    @return $list;
  }

  @for $i from -1 * $length through -1 {
    $i: abs($i);
    $j: random($length - 1) + 1;
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, $j));
    $list: set-nth($list, $j, $tmp);
  }
  @return $list;
}

// Alias
@function randomize($list) {
  @return shuffle($list);
}

// Slices $list between $start and $end
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#slice
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $start [Number] : start index
// @param $end [Number] : end index
// -------------------------------------------------------------------------------
// @raise [Error] if $start or $end aren't integers
// @raise [Error] if $start is greater than $end
// @raise [Error] if $start or $end is strictly lesser than 1
// @raise [Error] if $start is strictly greater than length of $list
// @raise [Error] if $end is strictly greater than length of $list
// -------------------------------------------------------------------------------
// @return [List] | false

@function slice($list, $start: 1, $end: length($list)) {
  @if type-of($start) != number or type-of($end) != number {
    @warn "List indexes #{$start} and #{$end} must be numbers for `slice`.";
    @return false;
  }

  @if $start > $end {
    @warn "Start index is #{$start} but has to be lesser than or equals to the end index (#{$end}) for `slice`.";
    @return false;
  }

  @if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
    @return false;
  }

  @if $start > length($list) {
    @warn "Start index is #{$start} but list is only #{length($list)} items long for `slice`.";
    @return false;
  }

  @if $end > length($list) {
    @warn "End index is #{$end} but list is only #{length($list)} items long for `slice`.";
    @return false;
  }

  $result: ();
  @for $i from $start through $end {
    $result: append($result, nth($list, $i), list-separator($list));
  }

  @return $result;
}
// Sorts values of $list using quick-sort algorithm
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#sort
// -------------------------------------------------------------------------------
// @alias `order()`
// -------------------------------------------------------------------------------
// @dependence `str-compare()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $order [List] : order
// -------------------------------------------------------------------------------
// @return [List]

@function sort($list, $order: "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z") {
  $less:  ();
  $equal: ();
  $large: ();
  $length: length($list);
  
  @if $length > 1 {
    $seed: nth($list, ceil($length / 2));
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      }
      @else if str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      }
      @else if not str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }
    @return join(join(sort($less, $order), $equal), sort($large, $order));
  }
  @return $list;
}

// Alias
@function order($list) {
  @return sort($list);
}

// Sums up all numeric values in $list
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#sum
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $force [Boolean] : enable / disable parseInt
// -------------------------------------------------------------------------------
// @return [Number]

@function sum($list, $force: false) {
  $result: 0;

  @each $item in $list {
    @if type-of($item) == number {

      @if $force and not unitless($item) {
        $item: $item / ($item * 0 + 1);
      }

      @if unitless($item) {
        $result: $result + $item;
      }

    }
  }

  @return $result;
}

// Joins all elements of $list with $glue
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#to-string
// -------------------------------------------------------------------------------
// @alias `stringify()`
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $glue [String] : value to use as a join string
// -------------------------------------------------------------------------------
// @return [String]

@function to-string($list, $glue: '') {
  $result: '';
  $length: length($list);

  @for $i from 1 through $length {
    $item: nth($list, $i);
    $result: $result + if(length($item) > 1, to-string($item, $glue), $item + $glue);
  }

  @return quote(str-slice($result, 1, str-length($glue) * -1 - 1));
}

// Alias
@function stringify($list, $glue: '') {
  @return to-string($list, $glue);
}
// Returns a list of values from $lists minus duplicates
// -------------------------------------------------------------------------------
// @documentation http://sassylists.com/documentation/#union
// -------------------------------------------------------------------------------
// @alias `merge()`
// -------------------------------------------------------------------------------
// @dependence `flatten()`
// @dependence `remove-duplicates()`
// -------------------------------------------------------------------------------
// @example union((a b), (b c), (a b c d)) => a b c d
// -------------------------------------------------------------------------------
// @param $lists [ArgList] : lists
// -------------------------------------------------------------------------------
// @return [List]

@function union($lists...) {
  $result: remove-duplicates(flatten($lists));
  @return if(length($result) == 1, nth($result, 1), $result);
}

// Alias
@function merge($lists...) {
  @return union($lists...);
}
